/**
 * API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
@file:Suppress("LongParameterList", "MaxLineLength")

package com.company.app.client.growstuff.apis

import com.company.app.client.growstuff.infrastructure.ApiClient
import com.company.app.client.growstuff.infrastructure.ClientError
import com.company.app.client.growstuff.infrastructure.ClientException
import com.company.app.client.growstuff.infrastructure.MultiValueMap
import com.company.app.client.growstuff.infrastructure.RequestConfig
import com.company.app.client.growstuff.infrastructure.RequestMethod
import com.company.app.client.growstuff.infrastructure.ResponseType
import com.company.app.client.growstuff.infrastructure.ServerError
import com.company.app.client.growstuff.infrastructure.ServerException
import com.company.app.client.growstuff.infrastructure.Success
import com.company.app.client.growstuff.models.GetCropsResponse

class CropsApi(basePath: String = "/") : ApiClient(basePath) {
  @Suppress("UNCHECKED_CAST")
  fun apiV1CropsGet(
    pageLimit: String? = null,
    pageOffset: String? = null,
    sort: String? = null,
    include: String? = null,
    filterId: String? = null,
    filterApprovalStatus: String? = null,
    fieldsCrops: String? = null,
    fieldsPlantings: String? = null,
    fieldsSeeds: String? = null,
    fieldsHarvests: String? = null,
    fieldsPhotos: String? = null,
  ): GetCropsResponse {
    val localVariableQuery: MultiValueMap =
      mapOf(
        "page[limit]" to listOf("$pageLimit"),
        "page[offset]" to listOf("$pageOffset"),
        "sort" to listOf("$sort"),
        "include" to listOf("$include"),
        "filter[id]" to listOf("$filterId"),
        "filter[approval_status]" to listOf("$filterApprovalStatus"),
        "fields[crops]" to listOf("$fieldsCrops"),
        "fields[plantings]" to listOf("$fieldsPlantings"),
        "fields[seeds]" to listOf("$fieldsSeeds"),
        "fields[harvests]" to listOf("$fieldsHarvests"),
        "fields[photos]" to listOf("$fieldsPhotos"),
      ).filterValues { !it.contains("null") }

    val localVariableConfig =
      RequestConfig(
        RequestMethod.GET,
        "/api/v1/crops",
        query = localVariableQuery,
      )
    val response =
      request<GetCropsResponse>(
        localVariableConfig,
      )

    return when (response.responseType) {
      ResponseType.Success -> (response as Success<*>).data as GetCropsResponse
      ResponseType.Informational -> TODO()
      ResponseType.Redirection -> TODO()
      ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
      ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
    }
  }
//    /**
//     * crops Detail
//     *
//     * @param id ID
//     * @param include Include related data (optional)
//     * @param fields[crops] Display field (optional)
//     * @param fields[plantings] Display field (optional)
//     * @param fields[seeds] Display field (optional)
//     * @param fields[harvests] Display field (optional)
//     * @param fields[photos] Display field (optional)
//     * @param fields[crops] Display field (optional)
//     * @return InlineResponse2001
//     */
//    @Suppress("UNCHECKED_CAST")
//    fun apiV1CropsIdGet(id: kotlin.Int, include: kotlin.String? = null, fields[crops]: kotlin.String? = null, fields[plantings]: kotlin.String? = null, fields[seeds]: kotlin.String? = null, fields[harvests]: kotlin.String? = null, fields[photos]: kotlin.String? = null, fields[crops]: kotlin.String? = null): InlineResponse2001 {
//        val localVariableQuery: MultiValueMap = mapOf("include" to listOf("$include"), "fields[crops]" to listOf("$fields[crops]"), "fields[plantings]" to listOf("$fields[plantings]"), "fields[seeds]" to listOf("$fields[seeds]"), "fields[harvests]" to listOf("$fields[harvests]"), "fields[photos]" to listOf("$fields[photos]"), "fields[crops]" to listOf("$fields[crops]"))
//        val localVariableConfig = RequestConfig(
//                RequestMethod.GET,
//                "/api/v1/crops/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery
//        )
//        val response = request<InlineResponse2001>(
//                localVariableConfig
//        )
//
//        return when (response.responseType) {
//            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//        }
//    }
}
